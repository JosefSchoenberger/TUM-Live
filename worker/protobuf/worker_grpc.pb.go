// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: worker.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ToWorkerClient is the client API for ToWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToWorkerClient interface {
	// Requests a stream from a lecture hall
	RequestStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamResponse, error)
	RequestStreamEnd(ctx context.Context, in *StreamEndRequest, opts ...grpc.CallOption) (*StreamEndResponse, error)
}

type toWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewToWorkerClient(cc grpc.ClientConnInterface) ToWorkerClient {
	return &toWorkerClient{cc}
}

func (c *toWorkerClient) RequestStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamResponse, error) {
	out := new(StreamResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ToWorker/RequestStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toWorkerClient) RequestStreamEnd(ctx context.Context, in *StreamEndRequest, opts ...grpc.CallOption) (*StreamEndResponse, error) {
	out := new(StreamEndResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ToWorker/RequestStreamEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToWorkerServer is the server API for ToWorker service.
// All implementations must embed UnimplementedToWorkerServer
// for forward compatibility
type ToWorkerServer interface {
	// Requests a stream from a lecture hall
	RequestStream(context.Context, *StreamRequest) (*StreamResponse, error)
	RequestStreamEnd(context.Context, *StreamEndRequest) (*StreamEndResponse, error)
	mustEmbedUnimplementedToWorkerServer()
}

// UnimplementedToWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedToWorkerServer struct {
}

func (UnimplementedToWorkerServer) RequestStream(context.Context, *StreamRequest) (*StreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestStream not implemented")
}
func (UnimplementedToWorkerServer) RequestStreamEnd(context.Context, *StreamEndRequest) (*StreamEndResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestStreamEnd not implemented")
}
func (UnimplementedToWorkerServer) mustEmbedUnimplementedToWorkerServer() {}

// UnsafeToWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToWorkerServer will
// result in compilation errors.
type UnsafeToWorkerServer interface {
	mustEmbedUnimplementedToWorkerServer()
}

func RegisterToWorkerServer(s grpc.ServiceRegistrar, srv ToWorkerServer) {
	s.RegisterService(&ToWorker_ServiceDesc, srv)
}

func _ToWorker_RequestStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToWorkerServer).RequestStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ToWorker/RequestStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToWorkerServer).RequestStream(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToWorker_RequestStreamEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamEndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToWorkerServer).RequestStreamEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ToWorker/RequestStreamEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToWorkerServer).RequestStreamEnd(ctx, req.(*StreamEndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ToWorker_ServiceDesc is the grpc.ServiceDesc for ToWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.ToWorker",
	HandlerType: (*ToWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestStream",
			Handler:    _ToWorker_RequestStream_Handler,
		},
		{
			MethodName: "RequestStreamEnd",
			Handler:    _ToWorker_RequestStreamEnd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worker.proto",
}

// FromWorkerClient is the client API for FromWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FromWorkerClient interface {
	// Register is a request to the server to join the worker pool.
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type fromWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewFromWorkerClient(cc grpc.ClientConnInterface) FromWorkerClient {
	return &fromWorkerClient{cc}
}

func (c *fromWorkerClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/protobuf.FromWorker/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fromWorkerClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/protobuf.FromWorker/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FromWorkerServer is the server API for FromWorker service.
// All implementations must embed UnimplementedFromWorkerServer
// for forward compatibility
type FromWorkerServer interface {
	// Register is a request to the server to join the worker pool.
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	mustEmbedUnimplementedFromWorkerServer()
}

// UnimplementedFromWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedFromWorkerServer struct {
}

func (UnimplementedFromWorkerServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedFromWorkerServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedFromWorkerServer) mustEmbedUnimplementedFromWorkerServer() {}

// UnsafeFromWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FromWorkerServer will
// result in compilation errors.
type UnsafeFromWorkerServer interface {
	mustEmbedUnimplementedFromWorkerServer()
}

func RegisterFromWorkerServer(s grpc.ServiceRegistrar, srv FromWorkerServer) {
	s.RegisterService(&FromWorker_ServiceDesc, srv)
}

func _FromWorker_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FromWorkerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FromWorker/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FromWorkerServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FromWorker_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FromWorkerServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FromWorker/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FromWorkerServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FromWorker_ServiceDesc is the grpc.ServiceDesc for FromWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FromWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.FromWorker",
	HandlerType: (*FromWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _FromWorker_Register_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _FromWorker_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worker.proto",
}
